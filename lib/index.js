// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var ESDispatcher, esquery, estraverse, parsedSelectors;
  esquery = require('esquery');
  estraverse = require('estraverse');
  parsedSelectors = {};
  module.exports = ESDispatcher = function () {
    var addListener, removeListener;
    ESDispatcher.ESDispatcher = ESDispatcher;
    function ESDispatcher() {
      this._listeners = {};
    }
    ESDispatcher.prototype.listeners = function (selector) {
      return this._listeners[selector];
    };
    ESDispatcher.prototype.addListener = addListener = function (selector, listener) {
      if (null != parsedSelectors[selector])
        parsedSelectors[selector];
      else
        parsedSelectors[selector] = esquery.parse(selector);
      if (null != this._listeners[selector])
        this._listeners[selector];
      else
        this._listeners[selector] = [];
      this._listeners[selector].push(listener);
    };
    ESDispatcher.prototype.on = addListener;
    ESDispatcher.prototype.removeListener = removeListener = function (selector, listener) {
      var idx;
      if (!(null != this._listeners[selector]))
        return;
      idx = this._listeners[selector].indexOf(listener);
      if (!(idx > -1))
        return;
      this._listeners[selector].splice(idx, 1);
    };
    ESDispatcher.prototype.removeAllListeners = function (selector) {
      if (null != selector) {
        delete this._listeners[selector];
      } else {
        this._listeners = {};
      }
    };
    ESDispatcher.prototype.once = function (selector, listener) {
      var wrapper;
      wrapper = function (this$) {
        return function () {
          removeListener.call(this$, selector, wrapper);
          return listener.apply(this$, arguments);
        };
      }(this);
      return addListener.call(this, selector, wrapper);
    };
    ESDispatcher.prototype.observe = function (ast, done) {
      var ancestry;
      ancestry = [];
      estraverse.traverse(ast, {
        enter: function (this$) {
          return function (node, parent) {
            var listener, listeners, selector;
            if (null != parent)
              ancestry.unshift(parent);
            for (selector in this$._listeners) {
              if (!isOwn$(this$._listeners, selector))
                continue;
              listeners = this$._listeners[selector];
              if (esquery.matches(node, parsedSelectors[selector], ancestry))
                for (var i$ = 0, length$ = listeners.length; i$ < length$; ++i$) {
                  listener = listeners[i$];
                  listener(null, node, ancestry);
                }
            }
          };
        }(this),
        leave: function () {
          ancestry.shift();
        }
      });
      if (null != done)
        done();
    };
    return ESDispatcher;
  }();
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
